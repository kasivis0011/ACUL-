{"version":3,"file":"index.1AN9Dguv.js","sources":["../../../src/screens/login-id/hooks/useLoginIdManager.ts","../../../src/screens/login-id/components/AlternativeLogins.tsx","../../../src/screens/login-id/components/Footer.tsx","../../../src/screens/login-id/components/Header.tsx","../../../src/screens/login-id/components/IdentifierForm.tsx","../../../src/screens/login-id/index.tsx"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport type { ScreenMembersOnLoginId } from \"@auth0/auth0-acul-js\";\nimport LoginIdInstance from \"@auth0/auth0-acul-js/login-id\";\n\nimport { executeSafely } from \"@/utils/helpers/executeSafely\";\n\nexport const useLoginIdManager = () => {\n  const loginIdInstance = useMemo(() => new LoginIdInstance(), []);\n\n  const { transaction, screen } = loginIdInstance;\n  const { isSignupEnabled, isForgotPasswordEnabled, isPasskeyEnabled } =\n    transaction;\n\n  const { signupLink, resetPasswordLink, texts, captchaImage } = screen;\n\n  const handleLoginId = async (\n    loginId: string,\n    captcha?: string\n  ): Promise<void> => {\n    const options: { username: string; captcha?: string } = {\n      username: loginId?.trim() || \"\",\n    };\n\n    if (screen.isCaptchaAvailable && captcha?.trim()) {\n      options.captcha = captcha.trim();\n    }\n    executeSafely(`LoginId with options: ${JSON.stringify(options)}`, () =>\n      loginIdInstance.login(options)\n    );\n  };\n\n  const handleFederatedLogin = async (connectionName: string) => {\n    executeSafely(`Federated login with connection: ${connectionName}`, () =>\n      loginIdInstance.federatedLogin({ connection: connectionName })\n    );\n  };\n\n  const handlePasskeyLogin = async () => {\n    if (isPasskeyEnabled) {\n      executeSafely(`Passkey login`, () => loginIdInstance.passkeyLogin());\n    }\n  };\n\n  const handlePickCountryCode = async () => {\n    executeSafely(`Pick country code`, () => loginIdInstance.pickCountryCode());\n  };\n\n  return {\n    loginIdInstance,\n    handleLoginId,\n    handleFederatedLogin,\n    handlePasskeyLogin,\n    handlePickCountryCode,\n    texts: (texts || {}) as ScreenMembersOnLoginId[\"texts\"],\n    isSignupEnabled: isSignupEnabled === true,\n    isForgotPasswordEnabled: isForgotPasswordEnabled === true,\n    isPasskeyEnabled: isPasskeyEnabled === true,\n    isCaptchaAvailable: screen.isCaptchaAvailable === true,\n    errors: loginIdInstance.getError(),\n    captchaImage,\n    captcha: screen.captcha || null,\n    signupLink,\n    resetPasswordLink,\n  };\n};\n","import ULThemeSocialProviderButton from \"@/components/ULThemeSocialProviderButton\";\nimport { getIcon } from \"@/utils/helpers/iconUtils\";\nimport type { SocialConnection } from \"@/utils/helpers/socialUtils\";\nimport { getSocialProviderDetails } from \"@/utils/helpers/socialUtils\";\n\nimport { useLoginIdManager } from \"../hooks/useLoginIdManager\";\n\nexport interface AlternativeLoginsProps {\n  connections?: SocialConnection[] | undefined;\n}\n\nconst AlternativeLogins = ({ connections }: AlternativeLoginsProps) => {\n  const { handleFederatedLogin, handlePasskeyLogin, texts, isPasskeyEnabled } =\n    useLoginIdManager();\n\n  // Handle text fallbacks in component\n  const passkeyButtonText =\n    texts?.passkeyButtonText || \"Continue with a passkey\";\n\n  return (\n    <>\n      <div className=\"space-y-3 mt-2\">\n        {isPasskeyEnabled && (\n          <ULThemeSocialProviderButton\n            key=\"passkey\"\n            displayName=\"Passkey\"\n            buttonText={passkeyButtonText}\n            iconComponent={<span className=\"text-primary\">{getIcon()}</span>}\n            onClick={() => handlePasskeyLogin()}\n          />\n        )}\n        {connections?.map((connection: SocialConnection) => {\n          const { displayName, iconComponent } =\n            getSocialProviderDetails(connection);\n          const socialButtonText = `Continue with ${displayName}`;\n          return (\n            <ULThemeSocialProviderButton\n              key={connection.name}\n              displayName={displayName}\n              buttonText={socialButtonText}\n              iconComponent={iconComponent}\n              onClick={() => handleFederatedLogin(connection.name)}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default AlternativeLogins;\n","import ULThemeLink from \"@/components/ULThemeLink\";\nimport { rebaseLinkToCurrentOrigin } from \"@/utils/helpers/urlUtils\";\n\nimport { useLoginIdManager } from \"../hooks/useLoginIdManager\";\n\nfunction Footer() {\n  const { isSignupEnabled, signupLink, texts } = useLoginIdManager();\n\n  if (!isSignupEnabled) {\n    return null;\n  }\n\n  const localizedSignupLink = rebaseLinkToCurrentOrigin(signupLink);\n\n  // Handle text fallbacks in component\n  const footerText = texts?.footerText || \"Don't have an account?\";\n  const footerLinkText = texts?.footerLinkText || \"Sign up\";\n\n  return (\n    <div className=\"mt-4 text-left\">\n      <span className=\"pr-1 text-body-text text-(length:--ul-theme-font-body-text-size) font-body\">\n        {footerText}\n      </span>\n      {localizedSignupLink && (\n        <ULThemeLink href={localizedSignupLink}>{footerLinkText}</ULThemeLink>\n      )}\n    </div>\n  );\n}\n\nexport default Footer;\n","import ULThemeLogo from \"@/components/ULThemeLogo\";\nimport ULThemeSubtitle from \"@/components/ULThemeSubtitle\";\nimport ULThemeTitle from \"@/components/ULThemeTitle\";\n\nimport { useLoginIdManager } from \"../hooks/useLoginIdManager\";\n\nfunction Header() {\n  const { texts } = useLoginIdManager();\n\n  // Handle text fallbacks in component\n  const logoAltText = texts?.logoAltText || \"Application Logo\";\n\n  return (\n    <>\n      <ULThemeLogo altText={logoAltText}></ULThemeLogo>\n      <ULThemeTitle>{texts?.title || \"Welcome\"}</ULThemeTitle>\n      <ULThemeSubtitle>\n        {texts?.description ||\n          \"Log in to dev-tenant to continue to my acul react.\"}\n      </ULThemeSubtitle>\n    </>\n  );\n}\n\nexport default Header;\n","import { useForm } from \"react-hook-form\";\n\nimport type { Error, TransactionMembersOnLoginId } from \"@auth0/auth0-acul-js\";\n\nimport Captcha from \"@/components/Captcha/index\";\nimport { ULThemeFloatingLabelField } from \"@/components/form/ULThemeFloatingLabelField\";\nimport { ULThemeFormMessage } from \"@/components/form/ULThemeFormMessage\";\nimport { Form, FormField, FormItem } from \"@/components/ui/form\";\nimport ULThemeCountryCodePicker from \"@/components/ULThemeCountryCodePicker\";\nimport { ULThemeAlert, ULThemeAlertTitle } from \"@/components/ULThemeError\";\nimport ULThemeLink from \"@/components/ULThemeLink\";\nimport { ULThemePrimaryButton } from \"@/components/ULThemePrimaryButton\";\nimport { useCaptcha } from \"@/hooks/useCaptcha\";\nimport {\n  isPhoneNumberSupported,\n  transformAuth0CountryCode,\n} from \"@/utils/helpers/countryUtils\";\nimport { getFieldError } from \"@/utils/helpers/errorUtils\";\nimport { getIdentifierDetails } from \"@/utils/helpers/identifierUtils\";\nimport { rebaseLinkToCurrentOrigin } from \"@/utils/helpers/urlUtils\";\n\nimport { useLoginIdManager } from \"../hooks/useLoginIdManager\";\n\ninterface LoginIdFormData {\n  identifier: string;\n  captcha?: string;\n}\n\nfunction IdentifierForm() {\n  const {\n    handleLoginId,\n    errors,\n    isCaptchaAvailable,\n    captcha,\n    resetPasswordLink,\n    isForgotPasswordEnabled,\n    loginIdInstance,\n    texts,\n    handlePickCountryCode,\n  } = useLoginIdManager();\n\n  const form = useForm<LoginIdFormData>({\n    defaultValues: {\n      identifier: \"\",\n      captcha: \"\",\n    },\n  });\n\n  const {\n    formState: { isSubmitting },\n  } = form;\n\n  const getCaptchaTheme = (): \"light\" | \"dark\" | \"auto\" => {\n    const allowedThemes = [\"light\", \"dark\", \"auto\"] as const;\n    const rawTheme =\n      loginIdInstance?.branding?.themes?.default?.colors?.captcha_widget_theme;\n\n    // Type guard to check if the raw theme is a valid theme\n    const isValidTheme = (\n      theme: unknown\n    ): theme is \"light\" | \"dark\" | \"auto\" => {\n      return allowedThemes.includes(theme as \"light\" | \"dark\" | \"auto\");\n    };\n\n    return isValidTheme(rawTheme) ? rawTheme : \"auto\";\n  };\n\n  // Handle text fallbacks in component\n  const buttonText = texts?.buttonText || \"Continue\";\n  const captchaLabel = texts?.captchaCodePlaceholder?.concat(\"*\") || \"CAPTCHA*\";\n  const forgotPasswordText = texts?.forgotPasswordText || \"Forgot Password?\";\n\n  // Get general errors (not field-specific)\n  const generalErrors =\n    errors?.filter((error: Error) => !error.field || error.field === null) ||\n    [];\n\n  const identifierSDKError =\n    getFieldError(\"identifier\", errors) ||\n    getFieldError(\"email\", errors) ||\n    getFieldError(\"phone\", errors) ||\n    getFieldError(\"username\", errors);\n\n  const captchaSDKError = getFieldError(\"captcha\", errors);\n\n  const { captchaConfig, captchaProps, captchaValue } = useCaptcha(\n    captcha || undefined,\n    captchaLabel,\n    getCaptchaTheme()\n  );\n\n  // Get allowed identifiers directly from SDK\n  const allowedIdentifiers =\n    loginIdInstance?.transaction?.allowedIdentifiers || [];\n\n  const {\n    label: identifierLabel,\n    type: identifierType,\n    autoComplete: identifierAutoComplete,\n  } = getIdentifierDetails(allowedIdentifiers, texts);\n\n  // Proper submit handler with form data\n  const onSubmit = async (data: LoginIdFormData) => {\n    await handleLoginId(data.identifier, captchaValue);\n  };\n\n  const localizedResetPasswordLink =\n    resetPasswordLink && rebaseLinkToCurrentOrigin(resetPasswordLink);\n\n  const shouldShowCountryPicker = isPhoneNumberSupported(allowedIdentifiers);\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-2\">\n        {/* General alerts at the top */}\n        {generalErrors.length > 0 && (\n          <div className=\"space-y-3 mb-4\">\n            {generalErrors.map((error: Error, index: number) => (\n              <ULThemeAlert key={index} variant=\"destructive\">\n                <ULThemeAlertTitle>{error.message}</ULThemeAlertTitle>\n              </ULThemeAlert>\n            ))}\n          </div>\n        )}\n\n        {/* Country Code Picker - only show if phone numbers are supported */}\n        {shouldShowCountryPicker && (\n          <div className=\"mb-4\">\n            <ULThemeCountryCodePicker\n              selectedCountry={transformAuth0CountryCode(\n                (loginIdInstance?.transaction as TransactionMembersOnLoginId)\n                  ?.countryCode,\n                (loginIdInstance?.transaction as TransactionMembersOnLoginId)\n                  ?.countryPrefix\n              )}\n              onClick={handlePickCountryCode}\n              fullWidth\n              placeholder=\"Select Country\"\n            />\n          </div>\n        )}\n\n        {/* Identifier input field */}\n        <FormField\n          control={form.control}\n          name=\"identifier\"\n          rules={{\n            required: \"This field is required\",\n            maxLength: {\n              value: 100,\n              message: \"Maximum 100 characters allowed\",\n            },\n          }}\n          render={({ field, fieldState }) => (\n            <FormItem>\n              <ULThemeFloatingLabelField\n                {...field}\n                label={identifierLabel}\n                type={identifierType}\n                autoFocus={true}\n                autoComplete={identifierAutoComplete}\n                error={!!fieldState.error || !!identifierSDKError}\n              />\n              <ULThemeFormMessage\n                sdkError={identifierSDKError}\n                hasFormError={!!fieldState.error}\n              />\n            </FormItem>\n          )}\n        />\n\n        {/* CAPTCHA Box */}\n        {isCaptchaAvailable && captchaConfig && (\n          <Captcha\n            control={form.control}\n            name=\"captcha\"\n            captcha={captchaConfig}\n            {...captchaProps}\n            sdkError={captchaSDKError}\n            rules={{\n              required: \"Please complete the CAPTCHA\",\n              maxLength: {\n                value: 15,\n                message: \"CAPTCHA too long\",\n              },\n            }}\n          />\n        )}\n\n        {/* Forgot Password link */}\n        <div className=\"text-left mb-4\">\n          {isForgotPasswordEnabled && localizedResetPasswordLink && (\n            <ULThemeLink href={localizedResetPasswordLink}>\n              {forgotPasswordText}\n            </ULThemeLink>\n          )}\n        </div>\n\n        {/* Submit button */}\n        <ULThemePrimaryButton\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isSubmitting}\n        >\n          {buttonText}\n        </ULThemePrimaryButton>\n      </form>\n    </Form>\n  );\n}\n\nexport default IdentifierForm;\n","import ULThemeCard from \"@/components/ULThemeCard\";\nimport ULThemePageLayout from \"@/components/ULThemePageLayout\";\nimport ULThemeSeparator from \"@/components/ULThemeSeparator\";\nimport { SocialConnection } from \"@/utils/helpers/socialUtils\";\nimport { extractTokenValue } from \"@/utils/helpers/tokenUtils\";\nimport { applyAuth0Theme } from \"@/utils/theme/themeEngine\";\n\nimport AlternativeLogins from \"./components/AlternativeLogins\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport IdentifierForm from \"./components/IdentifierForm\";\nimport { useLoginIdManager } from \"./hooks/useLoginIdManager\";\n\nfunction LoginIdScreen() {\n  // Extracting attributes from hook made out of LoginIdInstance class of Auth0 JS SDK\n  const { loginIdInstance, texts, isPasskeyEnabled } = useLoginIdManager();\n\n  // Fetching List of Social Connections\n  const socialConnectionsList = loginIdInstance?.transaction\n    ?.alternateConnections as SocialConnection[] | undefined;\n\n  // Check whether separator component needs to be rendered based on passkey or other social connections\n  const showSeparator =\n    isPasskeyEnabled ||\n    (socialConnectionsList && socialConnectionsList.length > 0);\n\n  // Other Texts\n  const separatorText = texts?.separatorText || \"OR\";\n  document.title = texts?.pageTitle || \"Login\";\n\n  // Apply theme from SDK instance when screen loads\n  applyAuth0Theme(loginIdInstance);\n\n  // Extracting Tenant setting for social login component alignment on the layout via theme token\n  const socialLoginAlignment = extractTokenValue(\n    \"--ul-theme-widget-social-buttons-layout\"\n  );\n\n  const renderSocialLogins = (alignment: \"top\" | \"bottom\") => (\n    <>\n      {alignment === \"bottom\" && showSeparator && (\n        <ULThemeSeparator text={separatorText} />\n      )}\n      <AlternativeLogins connections={socialConnectionsList} />\n      {alignment === \"top\" && showSeparator && (\n        <ULThemeSeparator text={separatorText} />\n      )}\n    </>\n  );\n\n  return (\n    // Applying UDS theme overrides using the \"theme-universal\" class\n    <ULThemePageLayout className=\"theme-universal\">\n      <ULThemeCard className=\"w-full max-w-[400px] gap-0\">\n        <Header />\n        {socialLoginAlignment === \"top\" && renderSocialLogins(\"top\")}\n        <IdentifierForm />\n        <Footer />\n        {socialLoginAlignment === \"bottom\" && renderSocialLogins(\"bottom\")}\n      </ULThemeCard>\n    </ULThemePageLayout>\n  );\n}\n\nexport default LoginIdScreen;\n"],"names":["useLoginIdManager","loginIdInstance","useMemo","LoginIdInstance","transaction","screen","isSignupEnabled","isForgotPasswordEnabled","isPasskeyEnabled","signupLink","resetPasswordLink","texts","captchaImage","loginId","captcha","options","executeSafely","connectionName","AlternativeLogins","connections","handleFederatedLogin","handlePasskeyLogin","passkeyButtonText","jsx","Fragment","jsxs","ULThemeSocialProviderButton","connection","displayName","iconComponent","getSocialProviderDetails","socialButtonText","Footer","localizedSignupLink","rebaseLinkToCurrentOrigin","footerText","footerLinkText","ULThemeLink","Header","logoAltText","ULThemeLogo","ULThemeTitle","ULThemeSubtitle","IdentifierForm","handleLoginId","errors","isCaptchaAvailable","handlePickCountryCode","form","useForm","isSubmitting","getCaptchaTheme","allowedThemes","rawTheme","theme","buttonText","captchaLabel","forgotPasswordText","generalErrors","error","identifierSDKError","getFieldError","captchaSDKError","captchaConfig","captchaProps","captchaValue","useCaptcha","allowedIdentifiers","identifierLabel","identifierType","identifierAutoComplete","getIdentifierDetails","onSubmit","data","localizedResetPasswordLink","shouldShowCountryPicker","isPhoneNumberSupported","Form","index","ULThemeAlert","ULThemeAlertTitle","ULThemeCountryCodePicker","transformAuth0CountryCode","FormField","field","fieldState","FormItem","ULThemeFloatingLabelField","ULThemeFormMessage","Captcha","ULThemePrimaryButton","LoginIdScreen","socialConnectionsList","showSeparator","separatorText","applyAuth0Theme","socialLoginAlignment","extractTokenValue","renderSocialLogins","alignment","ULThemeSeparator","ULThemePageLayout","ULThemeCard"],"mappings":"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"}