{"version":3,"file":"index.DMEBojb4.js","sources":["../../../src/screens/login-password/hooks/useLoginPasswordManager.ts","../../../src/screens/login-password/components/Footer.tsx","../../../src/screens/login-password/components/Header.tsx","../../../src/screens/login-password/components/IdentifierForm.tsx","../../../src/screens/login-password/index.tsx"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport type { ScreenMembersOnLoginPassword } from \"@auth0/auth0-acul-js\";\nimport LoginPassword from \"@auth0/auth0-acul-js/login-password\";\n\nimport { executeSafely } from \"@/utils/helpers/executeSafely\";\n\n/**\n * Custom hook to manage the LoginPassword screen functionality.\n * This hook provides methods and properties to handle login with password,\n * federated login, and other related functionalities like CAPTCHA and error handling.\n */\nexport const useLoginPasswordManager = () => {\n  // Initialize the LoginPassword instance\n  const loginPasswordInstance = useMemo(() => new LoginPassword(), []);\n\n  // Extract transaction and screen properties from the LoginPassword instance\n  const { transaction, screen } = loginPasswordInstance;\n\n  // Extract relevant flags from the transaction object\n  const { isSignupEnabled, isForgotPasswordEnabled, isPasskeyEnabled } =\n    transaction;\n\n  // Extract relevant properties from the screen object\n  const {\n    signupLink,\n    resetPasswordLink,\n    texts,\n    captchaImage,\n    editIdentifierLink,\n    links,\n    data,\n  } = screen;\n\n  /**\n   * Handles the login process using a username and password.\n   * Optionally includes a CAPTCHA value if required.\n   *\n   * @param loginId - The username or email address of the user.\n   * @param password - The password of the user.\n   * @param captcha - (Optional) The CAPTCHA value if required.\n   * @returns A promise that resolves when the login process is complete.\n   */\n  const handleLoginPassword = async (\n    loginId: string,\n    password: string,\n    captcha?: string\n  ): Promise<void> => {\n    const options: { username: string; password: string; captcha?: string } = {\n      username: loginId?.trim() || \"\",\n      password: password?.trim() || \"\",\n    };\n\n    // Include CAPTCHA in the options if available and provided\n    if (screen.isCaptchaAvailable && captcha?.trim()) {\n      options.captcha = captcha.trim();\n    }\n\n    // Execute the login process safely and log any errors\n    executeSafely(\n      `LoginPassword with options: ${JSON.stringify(options)}`,\n      () => loginPasswordInstance.login(options)\n    );\n  };\n\n  return {\n    loginPasswordInstance,\n    handleLoginPassword,\n    texts: (texts || {}) as ScreenMembersOnLoginPassword[\"texts\"],\n    isSignupEnabled: isSignupEnabled === true,\n    isForgotPasswordEnabled: isForgotPasswordEnabled === true,\n    isPasskeyEnabled: isPasskeyEnabled === true,\n    isCaptchaAvailable: screen.isCaptchaAvailable === true,\n    errors: loginPasswordInstance.getError(),\n    links,\n    editIdentifierLink,\n    signupLink,\n    resetPasswordLink,\n    captchaImage,\n    data,\n  };\n};\n","import ULThemeLink from \"@/components/ULThemeLink\";\nimport { rebaseLinkToCurrentOrigin } from \"@/utils/helpers/urlUtils\";\n\nimport { useLoginPasswordManager } from \"../hooks/useLoginPasswordManager\";\n\nfunction Footer() {\n  const { isSignupEnabled, signupLink, texts } = useLoginPasswordManager();\n\n  if (!isSignupEnabled) {\n    return null;\n  }\n\n  const localizedSignupLink = rebaseLinkToCurrentOrigin(signupLink);\n\n  // Handle text fallbacks in component\n  const footerText = texts?.footerText || \"Don't have an account?\";\n  const footerLinkText = texts?.footerLinkText || \"Sign up\";\n\n  return (\n    <div className=\"mt-4 text-left\">\n      <span className=\"text-sm pr-1\">{footerText}</span>\n      {localizedSignupLink && (\n        <ULThemeLink href={localizedSignupLink}>{footerLinkText}</ULThemeLink>\n      )}\n    </div>\n  );\n}\n\nexport default Footer;\n","import ULThemeLogo from \"@/components/ULThemeLogo\";\nimport ULThemeSubtitle from \"@/components/ULThemeSubtitle\";\nimport ULThemeTitle from \"@/components/ULThemeTitle\";\n\nimport { useLoginPasswordManager } from \"../hooks/useLoginPasswordManager\";\n\nfunction Header() {\n  const { texts } = useLoginPasswordManager();\n\n  // Handle text fallbacks in component\n  const logoAltText = texts?.logoAltText || \"Application Logo\";\n\n  return (\n    <>\n      <ULThemeLogo altText={logoAltText}></ULThemeLogo>\n      <ULThemeTitle>{texts?.title || \"Welcome\"}</ULThemeTitle>\n      <ULThemeSubtitle>\n        {texts?.description ||\n          \"Enter your password for My Company to continue to My App\"}\n      </ULThemeSubtitle>\n    </>\n  );\n}\n\nexport default Header;\n","import { useForm } from \"react-hook-form\";\n\nimport type { Error } from \"@auth0/auth0-acul-js\";\n\nimport Captcha from \"@/components/Captcha\";\nimport {\n  ULThemeFloatingLabelField,\n  ULThemeFormMessage,\n} from \"@/components/form\";\nimport { Form, FormField, FormItem } from \"@/components/ui/form\";\nimport { ULThemeAlert, ULThemeAlertTitle } from \"@/components/ULThemeError\";\nimport ULThemeLink from \"@/components/ULThemeLink\";\nimport { ULThemePasswordField } from \"@/components/ULThemePasswordField\";\nimport { ULThemePrimaryButton } from \"@/components/ULThemePrimaryButton\";\nimport { getFieldError } from \"@/utils/helpers/errorUtils\";\nimport { getIdentifierDetails } from \"@/utils/helpers/identifierUtils\";\nimport { rebaseLinkToCurrentOrigin } from \"@/utils/helpers/urlUtils\";\n\nimport { useLoginPasswordManager } from \"../hooks/useLoginPasswordManager\";\n\ninterface LoginPasswordFormData {\n  username: string;\n  password: string;\n  captcha?: string;\n}\n\n/**\n * IdentifierForm Component\n *\n * This component renders the login form for the LoginPassword screen.\n * It includes fields for username, password, and CAPTCHA (if required),\n * along with error handling and support for editing identifiers.\n */\nfunction IdentifierForm() {\n  // Extract necessary methods and properties from the custom hook\n  const {\n    links,\n    data,\n    handleLoginPassword,\n    errors,\n    isCaptchaAvailable,\n    captchaImage,\n    resetPasswordLink,\n    isForgotPasswordEnabled,\n    loginPasswordInstance,\n    texts,\n  } = useLoginPasswordManager();\n\n  // Initialize the form using react-hook-form\n  const form = useForm<LoginPasswordFormData>({\n    defaultValues: {\n      username: data?.username || \"\",\n      password: \"\",\n      captcha: \"\",\n    },\n  });\n\n  const {\n    formState: { isSubmitting },\n  } = form;\n\n  // Handle text fallbacks for button and field labels\n  const buttonText = texts?.buttonText || \"Continue\";\n  const passwordLabelText = texts?.passwordPlaceholder || \"Password\";\n  const captchaLabel = texts?.captchaCodePlaceholder?.concat(\"*\") || \"CAPTCHA*\";\n  const captchaImageAlt = \"CAPTCHA challenge\"; // Default fallback\n  const forgotPasswordText = texts?.forgotPasswordText || \"Forgot Password?\";\n\n  // Extract general errors (not field-specific) from the SDK\n  const generalErrors =\n    errors?.filter((error: Error) => !error.field || error.field === null) ||\n    [];\n\n  // Extract field-specific errors for username, password, and CAPTCHA\n  const usernameSDKError =\n    getFieldError(\"username\", errors) || getFieldError(\"email\", errors);\n  const passwordSDKError = getFieldError(\"password\", errors);\n  const captchaSDKError = getFieldError(\"captcha\", errors);\n\n  // Get allowed identifiers (e.g., email, username, phone) from the SDK\n  const allowedIdentifiers =\n    loginPasswordInstance?.transaction?.getAllowedIdentifiers() || [];\n\n  // Get password policy (e.g., minimum length) from the SDK\n  const passwordPolicy =\n    loginPasswordInstance?.transaction?.getPasswordPolicy();\n\n  // Determine the label and type for the username field based on allowed identifiers\n  const { label: usernameLabel, type: usernameType } = getIdentifierDetails(\n    allowedIdentifiers,\n    texts\n  );\n\n  /**\n   * Handles form submission.\n   *\n   * @param data - The form data containing username, password, and optional CAPTCHA.\n   */\n  const onSubmit = async (data: LoginPasswordFormData) => {\n    await handleLoginPassword(data.username, data.password, data.captcha);\n  };\n\n  // Rebase the reset password link to the current origin\n  const localizedResetPasswordLink =\n    resetPasswordLink && rebaseLinkToCurrentOrigin(resetPasswordLink);\n\n  // Rebase the edit identifier link to the current origin\n  const editIdentifierLink =\n    rebaseLinkToCurrentOrigin(links?.edit_identifier) || \"\";\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-2\">\n        {/* General error messages */}\n        {generalErrors.length > 0 && (\n          <div className=\"space-y-3 mb-4\">\n            {generalErrors.map((error: Error, index: number) => (\n              <ULThemeAlert key={index}>\n                <ULThemeAlertTitle>{error.message}</ULThemeAlertTitle>\n              </ULThemeAlert>\n            ))}\n          </div>\n        )}\n\n        {/* Username input field */}\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field, fieldState }) => (\n            <FormItem>\n              <ULThemeFloatingLabelField\n                {...field}\n                label={usernameLabel}\n                type={usernameType}\n                value={data?.username || \"\"}\n                error={!!fieldState.error || !!usernameSDKError}\n                readOnly={true}\n                endAdornment={\n                  <ULThemeLink href={editIdentifierLink}>\n                    {texts?.editEmailText || \"Edit\"}\n                  </ULThemeLink>\n                }\n                className=\"pr-[16px]\"\n              />\n              <ULThemeFormMessage\n                sdkError={usernameSDKError}\n                hasFormError={!!fieldState.error}\n              />\n            </FormItem>\n          )}\n        />\n\n        {/* Password input field */}\n        <FormField\n          control={form.control}\n          name=\"password\"\n          rules={{\n            required: \"Password is required\",\n            maxLength: {\n              value: 200,\n              message: \"Maximum 200 characters allowed\",\n            },\n            minLength: passwordPolicy?.minLength\n              ? {\n                  value: passwordPolicy.minLength,\n                  message: `Password must be at least ${passwordPolicy.minLength} characters`,\n                }\n              : undefined,\n          }}\n          render={({ field, fieldState }) => (\n            <FormItem>\n              <ULThemePasswordField\n                {...field}\n                label={passwordLabelText}\n                autoFocus={true}\n                autoComplete=\"current-password\"\n                error={!!fieldState.error || !!passwordSDKError}\n              />\n              <ULThemeFormMessage\n                sdkError={passwordSDKError}\n                hasFormError={!!fieldState.error}\n              />\n            </FormItem>\n          )}\n        />\n\n        {/* CAPTCHA Box */}\n        {isCaptchaAvailable &&\n          (passwordSDKError || captchaSDKError || generalErrors.length > 0) && (\n            <Captcha\n              control={form.control}\n              name=\"captcha\"\n              label={captchaLabel}\n              imageUrl={captchaImage || \"\"}\n              imageAltText={captchaImageAlt}\n              className=\"mb-4\"\n              sdkError={captchaSDKError}\n              rules={{\n                required: \"Please complete the CAPTCHA\",\n                maxLength: {\n                  value: 15,\n                  message: \"CAPTCHA too long\",\n                },\n              }}\n            />\n          )}\n\n        {/* Forgot Password link */}\n        <div className=\"text-left mb-4\">\n          {isForgotPasswordEnabled && localizedResetPasswordLink && (\n            <ULThemeLink href={localizedResetPasswordLink}>\n              {forgotPasswordText}\n            </ULThemeLink>\n          )}\n        </div>\n\n        {/* Submit button */}\n        <ULThemePrimaryButton\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isSubmitting}\n        >\n          {buttonText}\n        </ULThemePrimaryButton>\n      </form>\n    </Form>\n  );\n}\n\nexport default IdentifierForm;\n","import ULThemeCard from \"@/components/ULThemeCard\";\nimport ULThemePageLayout from \"@/components/ULThemePageLayout\";\nimport { applyAuth0Theme } from \"@/utils/theme/themeEngine\";\n\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport IdentifierForm from \"./components/IdentifierForm\";\nimport { useLoginPasswordManager } from \"./hooks/useLoginPasswordManager\";\n\nfunction LoginPasswordScreen() {\n  // Extracting attributes from hook made out of LoginPasswordInstance class of Auth0 JS SDK\n  const { loginPasswordInstance } = useLoginPasswordManager();\n\n  // Apply theme from SDK instance when screen loads\n  applyAuth0Theme(loginPasswordInstance);\n\n  return (\n    // Applying UDS theme overrides using the \"theme-universal\" class\n    <ULThemePageLayout className=\"theme-universal\">\n      <ULThemeCard className=\"w-full max-w-[400px] gap-0\">\n        <Header />\n        <IdentifierForm />\n        <Footer />\n      </ULThemeCard>\n    </ULThemePageLayout>\n  );\n}\n\nexport default LoginPasswordScreen;\n"],"names":["useLoginPasswordManager","loginPasswordInstance","useMemo","LoginPassword","transaction","screen","isSignupEnabled","isForgotPasswordEnabled","isPasskeyEnabled","signupLink","resetPasswordLink","texts","captchaImage","editIdentifierLink","links","data","loginId","password","captcha","options","executeSafely","Footer","localizedSignupLink","rebaseLinkToCurrentOrigin","footerText","footerLinkText","jsxs","jsx","ULThemeLink","Header","logoAltText","Fragment","ULThemeLogo","ULThemeTitle","ULThemeSubtitle","IdentifierForm","handleLoginPassword","errors","isCaptchaAvailable","form","useForm","isSubmitting","buttonText","passwordLabelText","captchaLabel","captchaImageAlt","forgotPasswordText","generalErrors","error","usernameSDKError","getFieldError","passwordSDKError","captchaSDKError","allowedIdentifiers","passwordPolicy","usernameLabel","usernameType","getIdentifierDetails","onSubmit","localizedResetPasswordLink","Form","index","ULThemeAlert","ULThemeAlertTitle","FormField","field","fieldState","FormItem","ULThemeFloatingLabelField","ULThemeFormMessage","ULThemePasswordField","Captcha","ULThemePrimaryButton","LoginPasswordScreen","applyAuth0Theme","ULThemePageLayout","ULThemeCard"],"mappings":"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"}